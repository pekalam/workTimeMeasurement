# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- release
- release-msix

pool:
  vmImage: 'windows-2019'

variables:
  testImgDir: '$(System.DefaultWorkingDirectory)\FaceRecogTestFixtures'
  buildPlatform: 'x64'
  buildConfiguration: 'release'

stages:
- stage: ReleaseStage
  displayName: ReleaseStage
  jobs:  
  - job: 'ReleaseJob'
    displayName: 'Build, Test, Publish'
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk 3.1'
        inputs:
          packageType: 'sdk'
          version: '3.1.101'
      - task: DotNetCoreCLI@2
        displayName: 'Restore packages'
        inputs:
          command: 'restore'
          projects: 'Application\*.csproj'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: 'Build app'
        inputs:
          command: 'build'
          projects: 'Application\Application.csproj'
          arguments: '-c Release -r win-x64'
      - task: DownloadSecureFile@1
        name: faceRecogTestFixtures
        inputs:
          secureFile: 'FaceRecogTestFixtures.zip'
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '$(faceRecogTestFixtures.secureFilePath)'
          destinationFolder: '$(testImgDir)'
          cleanDestinationFolder: false
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: 'Domain.UnitTests/Domain.UnitTests.csproj'
          arguments: '-c Debug'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: 'WorkTimeAlghorithm.UnitTests/WorkTimeAlghorithm.UnitTests.csproj'
          arguments: '-c Debug'
      - task: VSTest@2
        displayName: 'Run unit tests'
        inputs:
          testImgDir: '$(testImgDir)'
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            Domain.UnitTests\**\*Tests.dll
            WorkTimeAlghorithm.UnitTests\**\*Tests.dll
            !**\*TestAdapter.dll
            !**\obj\**
          searchFolder: '$(System.DefaultWorkingDirectory)'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: 'Infrastructure.Tests/Infrastructure.Tests.csproj'
          arguments: '-c Debug'
      - task: VSTest@2
        displayName: 'Run integration tests'
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            Infrastructure.Tests\**\*Tests.dll
            !**\*TestAdapter.dll
            !**\obj\**
          searchFolder: '$(System.DefaultWorkingDirectory)'


      - powershell: |
          # Update appxmanifest. This must be done before the build.
          [xml]$manifest= get-content ".\Application.Package\Package.appxmanifest"
          $manifest.Package.Identity.Version = "1.0.3.0"
          $manifest.save("Application.Package/Package.appxmanifest")
        displayName: 'Version Package Manifest'
        
      - task: MSBuild@1
        inputs:
          solution: Application.Package/Application.Package.wapproj
          platform: $(buildPlatform)
          configuration: $(buildConfiguration)
          msbuildArguments: '/p:OutputPath=NonPackagedApp
          /p:UapAppxPackageBuildMode=SideLoadOnly  /p:AppxBundle=Never /p:AppxPackageOutput=$(System.DefaultWorkingDirectory)\AppRelease\WTM.msix /p:AppxPackageSigningEnabled=false'
        displayName: 'Package the App'
        
      - task: DownloadSecureFile@1
        inputs:
          secureFile: 'certificate.pfx'
        displayName: 'Download Secure PFX File'
        
      - script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool"
          sign /fd SHA256 /f $(Agent.TempDirectory)/certificate.pfx /p $(certPass) $(System.DefaultWorkingDirectory)/AppRelease/WTM.msix'
        displayName: 'Sign MSIX Package'

      - task: CopyFiles@2
        inputs:
          SourceFolder: 'Application.Package'
          Contents: 'WTM.der'
          TargetFolder: '$(System.DefaultWorkingDirectory)\AppRelease'

      - task: ZipAndDropBox@0
        displayName: 'Send to dropbox'
        inputs:
          sourceDir: '$(System.DefaultWorkingDirectory)\AppRelease'
          zipPath: 'ApplicationMsix.zip'
          dropboxtoken: '$(DropboxToken)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)\AppRelease'
          ArtifactName: 'drop'
          publishLocation: 'Container'